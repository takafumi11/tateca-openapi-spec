openapi: 3.0.0
info:
  version: 1.0.0
  title: Money Mates API
servers:
  - url: 'https://example.com/api'

paths:
  /groups/{groupid}:
    get:
      tags:
        - get-group-info-api
      summary: Get group info by group id.
      description: |
        ## Dependency
        - MySQL
          - group_info
          - users
          - user_group

        ## Inner Spec
        TBD
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

  /groups:
    post:
      tags:
        - create-group-api
      summary: Create new group with users name
      description: |
        ## Dependencies
        - MySQL
          - group_info
          - users
          - user_group
        
        ## Inner Spec
        ### What will happen when this API is called.
        - Create group with the group name and new record will be inserted into __group_info__ table
        - Create user with the users name and new record will be inserted into __users__ table
        - New records will be inserted into __user_group__ table.

      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateGroupRequestBodyExample'
      responses:
        '201':
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers or body
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

components:
  schemas:
    GetGroupResponse:
      type: object
      required:
        - groupInfo
        - usersInfo
      properties:
        groupInfo:
          $ref: '#/components/schemas/GroupInfo'
        usersInfo:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    CreateGroupResponse:
      type: object
      required:
        - groupInfo
        - usersInfo
      properties:
        groupInfo:
          $ref: '#/components/schemas/GroupInfo'
        usersInfo:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    GroupInfo:
      type: object
      required:
        - uuid
        - name
        - joinToken
        - tokenExpires
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the group.
        name:
          type: string
          description: name of the group.
        joinToken:
          type: string
          format: uuid
          description: token to be used when user join to this group.
        tokenExpires:
          type: string
          format: date-time
          description: date token will be expired.
        createdAt:
          type: string
          format: date-time
          description: date when group was created.
        updatedAt:
          type: string
          format: date-time
          description: date when group info was updated.
    UserInfo:
      type: object
      required:
        - uuid
        - name
        - email
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the user.
        name:
          type: string
          description: name of the user.
        email:
          type: string
          format: email
          description: email of the user.
        createdAt:
          type: string
          format: date-time
          description: date when user was created.
        updatedAt:
          type: string
          format: date-time
          description: date when user was updated.

    CreateGroupRequest:
      type: object
      required:
        - groupName
        - usersName
      properties:
        groupName:
          type: string
          description: group name to be created.
        usersName:
          type: array
          items:
            type: string
          description: users name to be added into the group

  examples:
    GetGroupResponseExample:
      $ref: '#/components/examples/CreateGroupResponseExample'
    CreateGroupResponseExample:
      value:
        groupInfo:
          uuid: "123e4567-e89b-12d3-a456-426614174000"
          name: "Fruits"
          joinToken: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
          tokenExpires: "2023-12-31T23:59:59Z"
          createdAt: "2023-01-01T00:00:00Z"
          updatedAt: "2023-01-02T00:00:00Z"
        usersInfo:
          - uuid: "789e4567-e89b-12d3-a456-426614174000"
            name: "apple"
            email: "apple@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "456e4567-e89b-12d3-a456-426614174000"
            name: "banana"
            email: "banana@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "123e4567-e89b-12d3-a456-426614174001"
            name: "grape"
            email: "grape@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
    CreateGroupRequestBodyExample:
      value:
        groupName: "Fruits"
        usersName:
          - "apple"
          - "banana"
          - "grape"

  parameters:
    GroupIdPath:
      name: groupId
      in: path
      required: true
      description: unique group id.
      schema:
        type: string
        format: uuid
        example: "834q4510-e89b-12d3-a456-426614174000"
