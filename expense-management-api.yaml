openapi: 3.0.0
info:
  version: 1.0.0
  title: Money Mates API
servers:
  - url: 'https://example.com/api'

paths:
  /groups/{groupId}/transactions:
    get:
      tags:
        - transactions
      summary: Get transaction history for a group
      description: Returns the latest transaction history for the specified group, sorted by creation date.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: count
          in: query
          description: The number of transactions to return.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                type: object
                required:
                  - transactions
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
              examples:
                loanTransaction:
                  $ref: '#/components/examples/LoanTransactionExample'
        '400':
          description: Invalid request parameters.
        '404':
          description: Group not found.
        '401':
          description: Unauthorized.
        '500':
          description: Server error.
  /groups/{groupId}/repayments:
    post:
      tags:
        - repayments
      summary: Create new repayment
      description: |
        ## Dependencies
        - MySQL
          - transaction_history
          - repayment_history
        ## Inner Spec
        ### What will happen when this API is called.
        - A new record will be inserted into __transaction_history__ table
        - A new record will be inserted into __repayment_history__ table
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
      requestBody:
        $ref: '#/components/requestBodies/CreateRepaymentRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateRepaymentResponse201'

  /groups/{groupId}/repayments/{repaymentId}:
    patch:
      tags:
        - repayments
      summary: Update a repayment
      description: Updates a repayment record based on the provided repayment ID and request body.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: repaymentId
          in: path
          required: true
          description: The ID of the repayment to update.
          schema:
            type: string
            format: uuid
      requestBody:
        description: Repayment data to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepaymentBase'
            examples:
              updateExample:
                value:
                  amount: 600
                  date: "2023-05-01T15:00:00Z"
                  payerId: "123e4567-e89b-12d3-a456-426614174000"
                  recipient: "89e4567-e89b-12d3-a456-426614174123"
                  detail: "May's rent"
      responses:
        '200':
          description: Repayment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepaymentResponse'
        '404':
          description: Repayment not found.
        '400':
          description: Invalid request.
        '401':
          description: Unauthorized
        '500':
          description: Server error

    delete:
      tags:
        - repayments
      summary: Delete a repayment
      description: Deletes a repayment record based on the provided repayment ID.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: repaymentId
          in: path
          required: true
          description: The ID of the repayment to delete.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Repayment deleted successfully.
        '404':
          description: Repayment not found.
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /groups/{groupId}/loans:
    post:
      tags:
        - loans
      summary: Create new loan
      description: |
        ## Dependencies
        - MySQL
          - transaction_history
          - loans
          - loan_obligations

        ## Inner Spec
        ### What will happen when this API is called.
        - A new record will be inserted into __transaction_history__ table
        - A new record will be inserted into __loans__ table
        - A new record will be inserted into __loan_obligations__ table
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateLoanRequestExample'

      responses:
        '201':
          description: Loan was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoanResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateLoanResponseExample'
  /groups/{groupId}/loans/{loanId}:
    patch:
      tags:
        - loans
      summary: Update a loan
      description: Updates a loan record based on the provided loan ID and request body.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: loanId
          in: path
          required: true
          description: The ID of the loan to update.
          schema:
            type: string
            format: uuid
      requestBody:
        description: Loan data to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
            examples:
              updateExample:
                value:
                  title: "Updated Loan Title"
                  amount: 1000
                  date: "2023-06-01T15:00:00Z"
                  payerId: "123e4567-e89b-12d3-a456-426614174000"
                  detail: "Updated loan details"
                  obligationAmount: 500
                  obligationUserId: 2
      responses:
        '200':
          description: Loan updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoanResponse'
        '404':
          description: Loan not found.
        '400':
          description: Invalid request.
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - loans
      summary: Delete a loan
      description: Deletes a loan record based on the provided loan ID.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: loanId
          in: path
          required: true
          description: The ID of the loan to delete.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Loan deleted successfully.
        '404':
          description: Loan not found.
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /groups:
    post:
      tags:
        - groups
      summary: Create new group with users name
      description: |
        ## Dependencies
        - MySQL
          - group_info
          - users
          - user_group

        ## Inner Spec
        ### What will happen when this API is called.
        - Create group with the group name and new record will be inserted into __group_info__ table
        - Create user with the users name and new record will be inserted into __users__ table
        - New records will be inserted into __user_group__ table.

      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateGroupRequestBodyExample'
      responses:
        '201':
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfoResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers or body
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.
  /groups/{groupid}:
    get:
      tags:
        - groups
      summary: Get group info by group id.
      description: |
        ## Dependency
        - MySQL
          - group_info
          - users
          - user_group

        ## Inner Spec
        get group info and users info.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfoResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

  /groups/{groupId}/join:
    post:
      tags:
        - groups
      summary: Join a group
      description: Allows a user to join a group using a join token.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group to join.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - joinToken
              properties:
                joinToken:
                  type: string
                  description: The token required to join the group.
            examples:
              joinRequest:
                value:
                  joinToken: "exampleJoinToken123"
      responses:
        '200':
          description: Successfully joined the group. Returns the same response as get-group-info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupInfoResponse'
        '400':
          description: Invalid request. Possible reasons could include an invalid joinToken or groupId.
        '401':
          description: Unauthorized. The joinToken does not grant permission to join the group.
        '404':
          description: Group not found.
        '500':
          description: Server error


components:
  requestBodies:
    CreateRepaymentRequest:
      description: body to set created.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRepaymentRequest'
          examples:
            regular:
              $ref: '#/components/examples/CreateRepaymentRequestExample'
  responses:
    CreateRepaymentResponse201:
      description: Loan was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRepaymentResponse'
          examples:
            regular:
              $ref: '#/components/examples/CreateRepaymentResponseExample'
  schemas:
    UUIDAndTransactionID:
      type: object
      required:
        - uuid
        - transactionId
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        transactionId:
          type: string
          format: uuid
          description: Linked transaction identifier
    RepaymentBase:
      type: object
      required:
        - amount
        - date
        - payerId
        - recipientId
        - detail
      properties:
        amount:
          type: integer
          description: amount that payer payed to recipient.
        date:
          type: string
          format: date-time
          description: date when repayment occurred
        payerId:
          type: string
          format: uuid
          description: payer who returned money
        recipientId:
          type: string
          format: uuid
          description: recipient who received money
        detail:
          type: string
          description: note
    CreateRepaymentRequest:
      allOf:
        - $ref: '#/components/schemas/RepaymentBase'
    CreateRepaymentResponse:
      allOf:
        - $ref: '#/components/schemas/RepaymentBase'
        - $ref: '#/components/schemas/UUIDAndTransactionID'
    CreateLoanRequest:
      type: object
      required:
        - title
        - amount
        - date
        - payerId
        - detail
        - obligationAmount
        - obligationUserId
      properties:
        title:
          type: string
          description: title of the loan
        amount:
          type: integer
          description: amount of the loan
        payerId:
          type: string
          format: uuid
          description: payer id
        detail:
          type: string
          description: detail of the loan
        obligationAmount:
          type: integer
          description: the amount the obligation user need to repayment
        obligationUserId:
          type: integer
          description: obligation user id
    CreateLoanResponse:
      type: object
      required:
        - loan
        - obligations
      properties:
        loan:
          $ref: '#/components/schemas/Loan'
        obligations:
          type: array
          items:
            $ref: '#/components/schemas/Obligation'
    GroupInfoResponse:
      type: object
      required:
        - groupInfo
        - usersInfo
      properties:
        groupInfo:
          type: object
          required:
            - uuid
            - name
            - joinToken
            - tokenExpires
            - createdAt
            - updatedAt
          properties:
            uuid:
              type: string
              format: uuid
              description: uuid of the group.
            name:
              type: string
              description: name of the group.
            joinToken:
              type: string
              format: uuid
              description: token to be used when user join to this group.
            tokenExpires:
              type: string
              format: date-time
              description: date token will be expired.
            createdAt:
              type: string
              format: date-time
              description: date when group was created.
            updatedAt:
              type: string
              format: date-time
              description: date when group info was updated.
        usersInfo:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    Obligation:
      type: object
      required:
        - uuid
        - loanId
        - userId
        - amount
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the obligation
        loanId:
          type: string
          format: uuid
          description: uuid of the loan id
        userId:
          type: string
          format: uuid
          description: user id who need ot pay
        amount:
          type: integer
          description: amount that needed to pay.
    Transaction:
      type: object
      required:
        - transactionId
        - type
        - groupId
        - createdAt
        - updatedAt
        - details
      properties:
        transactionId:
          type: integer
          description: The unique identifier for the transaction.
        type:
          type: string
          enum:
            - LOAN
            - REPAYMENT
          description: The type of the transaction.
        groupId:
          type: integer
          description: The group ID associated with the transaction.
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the transaction was created.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the transaction was last updated.
        details:
          oneOf:
            - $ref: '#/components/schemas/Loan'
            - type: object
              properties:
                repaymentDetails:
                  allOf:
                    - $ref: '#/components/schemas/RepaymentBase'
                    - $ref: '#/components/schemas/UUIDAndTransactionID'
      discriminator:
        propertyName: type
        mapping:
          LOAN: '#/components/schemas/Loan'
          REPAYMENT: '#/components/schemas/RepaymentBase'
    Loan:
      type: object
      required:
        - uuid
        - transactionId
        - title
        - amount
        - date
        - payerId
        - detail
      properties:
        uuid:
          type: string
          format: uuid
          description: id of the loan
        transactionId:
          type: string
          format: uuid
          description: transaction id that is linked with
        title:
          type: string
          description: title of the loan
        amount:
          type: integer
          description: amount of the loan
        date:
          type: string
          format: date-time
          description: date when loan occured
        payerId:
          type: string
          format: uuid
          description: payer id
        detail:
          type: string
          description: detail of the loan
    GroupInfo:
      type: object
      required:
        - uuid
        - name
        - joinToken
        - tokenExpires
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the group.
        name:
          type: string
          description: name of the group.
        joinToken:
          type: string
          format: uuid
          description: token to be used when user join to this group.
        tokenExpires:
          type: string
          format: date-time
          description: date token will be expired.
        createdAt:
          type: string
          format: date-time
          description: date when group was created.
        updatedAt:
          type: string
          format: date-time
          description: date when group info was updated.
    UserInfo:
      type: object
      required:
        - uuid
        - name
        - email
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the user.
        name:
          type: string
          description: name of the user.
        email:
          type: string
          format: email
          description: email of the user.
        createdAt:
          type: string
          format: date-time
          description: date when user was created.
        updatedAt:
          type: string
          format: date-time
          description: date when user was updated.

    CreateGroupRequest:
      type: object
      required:
        - groupName
        - usersName
      properties:
        groupName:
          type: string
          description: group name to be created.
        usersName:
          type: array
          items:
            type: string
          description: users name to be added into the group

  examples:
    LoanTransactionExample:
        value:
          - transactionId: 1
            type: "LOAN"
            groupId: 101
            createdAt: "2023-04-01T12:00:00Z"
            updatedAt: "2023-04-01T12:00:00Z"
            details:
              uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
              transactionId: "0p6o5n4m-3l2k1j-9i8h7g-6f5e-4d3c2b1a0p9o"
              title: "Group Dinner"
              amount: 200
              date: "2023-05-20T18:30:00Z"
              payerId: "4d3c2b1a-0p9o8n-7m6l-5k4j-3i2h1g0f9e8d"
              detail: "Dinner at Joe's Diner with the team."
          - transactionId: 2
            type: "REPAYMENT"
            groupId: 102
            createdAt: "2023-04-02T15:00:00Z"
            updatedAt: "2023-04-02T15:00:00Z"
            details:
              uuid: "2b3c4d5e-6f7g-8h9i-0j1k-2l3m4n5o6p7q"
              transactionId: "1p2o3n4m-5l6k-7j8i-9h0g-f9e8d7c6b5a4"
              amount: 150
              date: "2023-05-21T19:00:00Z"
              payerId: "5d4c3b2a-1p0o-9n8m-7l6k-5j4i3h2g1f0e"
              recipientId: "8h7g6f5e-4d3c-2b1a-0p9o-8n7m6l5k4j3i"
              detail: "Repayment for the group dinner."
    CreateRepaymentRequestExample:
      value:
        amount: 500
        date: "2023-04-30T15:00:00Z"
        payerId: "123e4567-e89b-12d3-a456-426614174000"
        recipientId: "89e4567-e89b-12d3-a456-426614174123"
        detail: "April's rent"
    CreateRepaymentResponseExample:
      value:
        uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
        transactionId: "0p6o5n4m-3l2k1j-9i8h7g-6f5e-4d3c2b1a0p9o"
        amount: 500
        date: "2023-04-30T15:00:00Z"
        payerId: "123e4567-e89b-12d3-a456-426614174000"
        recipientId: "89e4567-e89b-12d3-a456-426614174123"
        detail: "April's rent"
    CreateLoanRequestExample:
      value:
        title: "リゴレット"
        amount: 10000
        date: "2023-12-31T23:59:59Z"
        payerId: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
        details: "ピザを食べました。"
        obligationAmount: 500
        obligationUserId: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
    CreateLoanResponseExample:
      value:
        loan:
          uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
          transactionId: "0p6o5n4m-3l2k1j-9i8h7g-6f5e-4d3c2b1a0p9o"
          title: "Group Dinner"
          amount: 200
          date: "2023-05-20T18:30:00Z"
          payerId: "4d3c2b1a-0p9o8n-7m6l-5k4j-3i2h1g0f9e8d"
          detail: "Dinner at Joe's Diner with the team."
        obligations:
          - uuid: "5f6g7h8i-9j0k-1l2m-3n4o-5p6q7r8s9t0u"
            loanId: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
            userId: "9t8s7r-6q5p-4o3n-2m1l-0k9j8i7h6g5f"
            amount: 100
          - uuid: "6g5f4d3s-2a1b-0p9o-8n7m-6l5k4j3i2h1g"
            loanId: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
            userId: "1g2h3i-4j5k-6l7m-8n9o-0p1q2r3s4t5u"
            amount: 100
    GetGroupResponseExample:
      $ref: '#/components/examples/CreateGroupResponseExample'
    CreateGroupResponseExample:
      value:
        groupInfo:
          uuid: "123e4567-e89b-12d3-a456-426614174000"
          name: "Fruits"
          joinToken: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
          tokenExpires: "2023-12-31T23:59:59Z"
          createdAt: "2023-01-01T00:00:00Z"
          updatedAt: "2023-01-02T00:00:00Z"
        usersInfo:
          - uuid: "789e4567-e89b-12d3-a456-426614174000"
            name: "apple"
            email: "apple@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "456e4567-e89b-12d3-a456-426614174000"
            name: "banana"
            email: "banana@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "123e4567-e89b-12d3-a456-426614174001"
            name: "grape"
            email: "grape@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
    CreateGroupRequestBodyExample:
      value:
        groupName: "Fruits"
        usersName:
          - "apple"
          - "banana"
          - "grape"

  parameters:
    GroupIdPath:
      name: groupId
      in: path
      required: true
      description: unique group id.
      schema:
        type: string
        format: uuid
        example: "834q4510-e89b-12d3-a456-426614174000"
