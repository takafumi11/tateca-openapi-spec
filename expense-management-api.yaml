openapi: 3.0.0
info:
  version: 1.0.0
  title: Money Mates API
servers:
  - url: 'https://example.com/api'

paths:
  /groups/{groupId}/repayments:
    post:
      tags:
        - create-repayment-api
      summary: Create new repayment
      description: |
        ## Dependencies
        - MySQL
          - transaction_history
          - repayment_history
        
        ## Inner Spec
        ### What will happen when this API is called.
        - A new record will be inserted into __transaction_history__ table
        - A new record will be inserted into __repayment_history__ table
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
      requestBody:
        $ref: '#/components/requestBodies/CreateRepaymentRequest'
      responses:
        '201':
          $ref: '#/components/responses/CreateRepaymentResponse201'
  /groups/{groupId}/repayments/{repaymentId}:
    patch:
      tags:
        - update-repayment-api
      summary: Update a repayment
      description: Updates a repayment record based on the provided repayment ID and request body.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: repaymentId
          in: path
          required: true
          description: The ID of the repayment to update.
          schema:
            type: string
            format: uuid
      requestBody:
        description: Repayment data to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepaymentBase'
            examples:
              updateExample:
                value:
                  amount: 600
                  date: "2023-05-01T15:00:00Z"
                  payerId: "123e4567-e89b-12d3-a456-426614174000"
                  recipient: "89e4567-e89b-12d3-a456-426614174123"
                  detail: "May's rent"
      responses:
        '200':
          description: Repayment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepaymentResponse'
        '404':
          description: Repayment not found.
        '400':
          description: Invalid request.
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - delete-repayment-api
      summary: Delete a repayment
      description: Deletes a repayment record based on the provided repayment ID.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
        - name: repaymentId
          in: path
          required: true
          description: The ID of the repayment to delete.
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Repayment deleted successfully.
        '404':
          description: Repayment not found.
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /groups/{groupId}/loans:
    post:
      tags:
        - create-loan-api
      summary: Create new loan
      description: |
        ## Dependencies
        - MySQL
          - transaction_history
          - loans
          - loan_obligations

        ## Inner Spec
        ### What will happen when this API is called.
        - A new record will be inserted into __transaction_history__ table
        - A new record will be inserted into __loans__ table
        - A new record will be inserted into __loan_obligations__ table
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'
      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoanRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateLoanRequestExample'

      responses:
        '201':
          description: Loan was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLoanResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateLoanResponseExample'
  /groups/{groupid}:
    get:
      tags:
        - get-group-info-api
      summary: Get group info by group id.
      description: |
        ## Dependency
        - MySQL
          - group_info
          - users
          - user_group

        ## Inner Spec
        get group info and users info.
      parameters:
        - $ref: '#/components/parameters/GroupIdPath/'

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

  /groups:
    post:
      tags:
        - create-group-api
      summary: Create new group with users name
      description: |
        ## Dependencies
        - MySQL
          - group_info
          - users
          - user_group
        
        ## Inner Spec
        ### What will happen when this API is called.
        - Create group with the group name and new record will be inserted into __group_info__ table
        - Create user with the users name and new record will be inserted into __users__ table
        - New records will be inserted into __user_group__ table.

      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateGroupRequestBodyExample'
      responses:
        '201':
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers or body
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

components:
  requestBodies:
    CreateRepaymentRequest:
      description: body to set created.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRepaymentRequest'
          examples:
            regular:
              $ref: '#/components/examples/CreateRepaymentRequestExample'
  responses:
    CreateRepaymentResponse201:
      description: Loan was created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateRepaymentResponse'
          examples:
            regular:
              $ref: '#/components/examples/CreateRepaymentResponseExample'
  schemas:
    UUIDAndTransactionID:
      type: object
      required:
        - uuid
        - transactionId
      properties:
        uuid:
          type: string
          format: uuid
          description: Unique identifier
        transactionId:
          type: string
          format: uuid
          description: Linked transaction identifier
    RepaymentBase:
      type: object
      required:
        - amount
        - date
        - payerId
        - recipientId
        - detail
      properties:
        amount:
          type: integer
          description: amount that payer payed to recipient.
        date:
          type: string
          format: date-time
          description: date when repayment occurred
        payerId:
          type: string
          format: uuid
          description: payer who returned money
        recipientId:
          type: string
          format: uuid
          description: recipient who received money
        detail:
          type: string
          description: note
    CreateRepaymentRequest:
      allOf:
        - $ref: '#/components/schemas/RepaymentBase'
    CreateRepaymentResponse:
      allOf:
        - $ref: '#/components/schemas/RepaymentBase'
        - $ref: '#/components/schemas/UUIDAndTransactionID'
    CreateLoanRequest:
      type: object
      required:
        - title
        - amount
        - date
        - payerId
        - detail
        - obligationAmount
        - obligationUserId
      properties:
        title:
          type: string
          description: title of the loan
        amount:
          type: integer
          description: amount of the loan
        payerId:
          type: string
          format: uuid
          description: payer id
        detail:
          type: string
          description: detail of the loan
        obligationAmount:
          type: integer
          description: the amount the obligation user need to repayment
        obligationUserId:
          type: integer
          description: obligation user id
    CreateLoanResponse:
      type: object
      required:
        - loan
        - obligations
      properties:
        loan:
          $ref: '#/components/schemas/Loan'
        obligations:
          type: array
          items:
            $ref: '#/components/schemas/Obligation'
    GetGroupResponse:
      type: object
      required:
        - groupInfo
        - usersInfo
      properties:
        groupInfo:
          $ref: '#/components/schemas/GroupInfo'
        usersInfo:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    CreateGroupResponse:
      type: object
      required:
        - groupInfo
        - usersInfo
      properties:
        groupInfo:
          $ref: '#/components/schemas/GroupInfo'
        usersInfo:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'
    Obligation:
      type: object
      required:
        - uuid
        - loanId
        - userId
        - amount
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the obligation
        loanId:
          type: string
          format: uuid
          description: uuid of the loan id
        userId:
          type: string
          format: uuid
          description: user id who need ot pay
        amount:
          type: integer
          description: amount that needed to pay.
    Loan:
      type: object
      required:
        - uuid
        - transactionId
        - title
        - amount
        - date
        - payerId
        - detail
      properties:
        uuid:
          type: string
          format: uuid
          description: id of the loan
        transactionId:
          type: string
          format: uuid
          description: transaction id that is linked with
        title:
          type: string
          description: title of the loan
        amount:
          type: integer
          description: amount of the loan
        date:
          type: string
          format: date-time
          description: date when loan occured
        payerId:
          type: string
          format: uuid
          description: payer id
        detail:
          type: string
          description: detail of the loan
    Transaction:
      type: object
      required:
        - uuid
        - type
        - groupId
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: transaction id
        type:
          type: string
          format: enum
          enum:
            - "Loan"
            - "Repayment"
          description: transaction type
        groupId:
          type: string
          format: uuid
          description: group id that has this l
    GroupInfo:
      type: object
      required:
        - uuid
        - name
        - joinToken
        - tokenExpires
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the group.
        name:
          type: string
          description: name of the group.
        joinToken:
          type: string
          format: uuid
          description: token to be used when user join to this group.
        tokenExpires:
          type: string
          format: date-time
          description: date token will be expired.
        createdAt:
          type: string
          format: date-time
          description: date when group was created.
        updatedAt:
          type: string
          format: date-time
          description: date when group info was updated.
    UserInfo:
      type: object
      required:
        - uuid
        - name
        - email
        - createdAt
        - updatedAt
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the user.
        name:
          type: string
          description: name of the user.
        email:
          type: string
          format: email
          description: email of the user.
        createdAt:
          type: string
          format: date-time
          description: date when user was created.
        updatedAt:
          type: string
          format: date-time
          description: date when user was updated.

    CreateGroupRequest:
      type: object
      required:
        - groupName
        - usersName
      properties:
        groupName:
          type: string
          description: group name to be created.
        usersName:
          type: array
          items:
            type: string
          description: users name to be added into the group

  examples:
    CreateRepaymentRequestExample:
      value:
        amount: 500
        date: "2023-04-30T15:00:00Z"
        payerId: "123e4567-e89b-12d3-a456-426614174000"
        recipientId: "89e4567-e89b-12d3-a456-426614174123"
        detail: "April's rent"
    CreateRepaymentResponseExample:
      value:
        uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
        transactionId: "0p6o5n4m-3l2k1j-9i8h7g-6f5e-4d3c2b1a0p9o"
        amount: 500
        date: "2023-04-30T15:00:00Z"
        payerId: "123e4567-e89b-12d3-a456-426614174000"
        recipientId: "89e4567-e89b-12d3-a456-426614174123"
        detail: "April's rent"
    CreateLoanRequestExample:
      value:
        title: "リゴレット"
        amount: 10000
        date: "2023-12-31T23:59:59Z"
        payerId: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
        details: "ピザを食べました。"
        obligationAmount: 500
        obligationUserId: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
    CreateLoanResponseExample:
      value:
        loan:
          uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
          transactionId: "0p6o5n4m-3l2k1j-9i8h7g-6f5e-4d3c2b1a0p9o"
          title: "Group Dinner"
          amount: 200
          date: "2023-05-20T18:30:00Z"
          payerId: "4d3c2b1a-0p9o8n-7m6l-5k4j-3i2h1g0f9e8d"
          detail: "Dinner at Joe's Diner with the team."
        obligations:
          - uuid: "5f6g7h8i-9j0k-1l2m-3n4o-5p6q7r8s9t0u"
            loanId: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
            userId: "9t8s7r-6q5p-4o3n-2m1l-0k9j8i7h6g5f"
            amount: 100
          - uuid: "6g5f4d3s-2a1b-0p9o-8n7m-6l5k4j3i2h1g"
            loanId: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
            userId: "1g2h3i-4j5k-6l7m-8n9o-0p1q2r3s4t5u"
            amount: 100
    GetGroupResponseExample:
      $ref: '#/components/examples/CreateGroupResponseExample'
    CreateGroupResponseExample:
      value:
        groupInfo:
          uuid: "123e4567-e89b-12d3-a456-426614174000"
          name: "Fruits"
          joinToken: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
          tokenExpires: "2023-12-31T23:59:59Z"
          createdAt: "2023-01-01T00:00:00Z"
          updatedAt: "2023-01-02T00:00:00Z"
        usersInfo:
          - uuid: "789e4567-e89b-12d3-a456-426614174000"
            name: "apple"
            email: "apple@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "456e4567-e89b-12d3-a456-426614174000"
            name: "banana"
            email: "banana@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
          - uuid: "123e4567-e89b-12d3-a456-426614174001"
            name: "grape"
            email: "grape@example.com"
            createdAt: "2023-01-01T00:00:00Z"
            updatedAt: "2023-01-02T00:00:00Z"
    CreateGroupRequestBodyExample:
      value:
        groupName: "Fruits"
        usersName:
          - "apple"
          - "banana"
          - "grape"

  parameters:
    GroupIdPath:
      name: groupId
      in: path
      required: true
      description: unique group id.
      schema:
        type: string
        format: uuid
        example: "834q4510-e89b-12d3-a456-426614174000"
