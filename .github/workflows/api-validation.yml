name: API Documentation with Redoc

on:
  push:
    branches: [ main ]

# 並行実行制御（同時デプロイを防止）
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    name: Validate OpenAPI & Build Redoc Documentation
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴取得（バージョン情報用）
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint OpenAPI specification
      run: npm run lint
    
    - name: Bundle specification
      run: npm run bundle
    
    - name: Build Redoc documentation
      run: |
        # Redoc HTMLファイル生成（カスタマイズ版）
        npx @redocly/cli build-docs openapi/openapi.yaml \
          --title "Tateca API Documentation" \
          --output docs/index.html \
          --options.theme.openapi.hideDownloadButton=false \
          --options.theme.openapi.expandResponses='200,201,400,401,404,500'
    
    - name: Create custom assets
      run: |
        # カスタムCSS追加
        mkdir -p docs/assets
        cat > docs/assets/custom.css << 'EOF'
        /* Tateca API カスタムスタイル */
        .redoc-wrap {
          font-family: 'Roboto', 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }
        
        /* ロゴ・ブランディング */
        .api-info > h1 {
          color: #1976d2 !important;
          font-weight: 600;
          border-bottom: 3px solid #1976d2;
          padding-bottom: 8px;
        }
        
        /* セキュリティ情報の強調 */
        .security-schemes h5 {
          color: #f44336;
          font-weight: 600;
        }
        
        /* レスポンスコードの色分け */
        .response-item[data-code^="2"] .response-item__status {
          background-color: #4caf50 !important;
        }
        
        .response-item[data-code^="4"] .response-item__status {
          background-color: #ff9800 !important;
        }
        
        .response-item[data-code^="5"] .response-item__status {
          background-color: #f44336 !important;
        }
        
        /* コードサンプルの改善 */
        .redoc-json {
          font-family: 'JetBrains Mono', 'Fira Code', Consolas, monospace !important;
          font-size: 13px;
          line-height: 1.5;
        }
        EOF
        
        # Favicon設定
        curl -s "https://api.tateca.com/favicon.ico" -o docs/favicon.ico 2>/dev/null || echo "<!-- No favicon -->" > docs/favicon.ico
    
    - name: Add Google Analytics (optional)
      run: |
        # Google Analytics tracking追加（必要に応じて）
        if [ ! -z "${{ secrets.GA_MEASUREMENT_ID }}" ]; then
          sed -i 's/<head>/<head>\n  <!-- Google Analytics -->\n  <script async src="https:\/\/www.googletagmanager.com\/gtag\/js?id=${{ secrets.GA_MEASUREMENT_ID }}"><\/script>\n  <script>\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag("js", new Date());\n    gtag("config", "${{ secrets.GA_MEASUREMENT_ID }}");\n  <\/script>/' docs/index.html
        fi
    
    - name: Validate generated documentation
      run: |
        # 生成されたHTMLの基本検証
        if [ ! -f "docs/index.html" ]; then
          echo "Error: Documentation not generated"
          exit 1
        fi
        
        # HTMLファイルサイズ確認
        FILE_SIZE=$(stat -f%z docs/index.html 2>/dev/null || stat -c%s docs/index.html)
        if [ $FILE_SIZE -lt 10000 ]; then
          echo "Error: Generated HTML is too small ($FILE_SIZE bytes)"
          exit 1
        fi
        
        echo "✅ Documentation generated successfully ($FILE_SIZE bytes)"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: redoc-documentation
        path: |
          docs/
          dist/tateca-api.yaml
        retention-days: 30
    
    - name: Upload bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: openapi-bundle
        path: dist/tateca-api.yaml
        retention-days: 90

  deploy-docs:
    runs-on: ubuntu-latest
    needs: validate-and-build
    if: github.ref == 'refs/heads/main'
    name: Deploy to GitHub Pages
    
    # GitHub Pages環境設定
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # GitHub Pagesに必要な権限
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: redoc-documentation
        path: .
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ steps.deployment.outcome }}" = "success" ]; then
          echo "🚀 Documentation deployed successfully!"
          echo "📖 View at: ${{ steps.deployment.outputs.page_url }}"
        else
          echo "❌ Deployment failed"
          exit 1
        fi

