openapi: 3.0.0
info:
  version: 1.0.0
  title: Money Mates API
servers:
  - url: 'https://example.com/api'

paths:
  /users:
    post:
      tags:
        - users
      summary: create-user-api
      description: This endpoint creates a new user in the system.
      parameters:
        - $ref: '#/components/parameters/Authorization'

      requestBody:
        description: Body to be inserted
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateUserRequestExample'

      responses:
        '201':
          description: A user is created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateUpdateUserResponseExample'

  /users/{uuid}:
    patch:
      tags:
        - users
      summary: update-user-api
      description: This endpoint updates a user's email(for now)
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/UserUuid'

      requestBody:
        description: Body to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              regular:
                $ref: '#/components/examples/UpdateUserRequestExample'
      responses:
        '200':
          description: A user is created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateUpdateUserResponseExample'

  /groups:
    get:
      tags:
        - groups
      summary: get-group-info-api
      description: THis endpoint provides group's info
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/GroupIdPath'

      responses:
        '201':
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'

    post:
      tags:
        - groups
      summary: Create new group with users name
      description: |
        ## Dependencies
        - MySQL
          - groups
          - users
          - user_groups

        ## Inner Spec
        ### What will happen when this API is called.
        - Create group with the group name and new record will be inserted into __groups__ table
        - Create user with the users name and new record will be inserted into __users__ table
        - New records will be inserted into __user_group__ table.

      parameters:
        - $ref: '#/components/parameters/Authorization'

      requestBody:
        description: body to set crated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
            examples:
              regular:
                $ref: '#/components/examples/CreateGroupRequestBodyExample'
      responses:
        '201':
          description: The group has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
              examples:
                regular:
                  $ref: '#/components/examples/CreateGroupResponseExample'
        '400':
          description: Invalid request, headers or body
        '401':
          description: Unauthorized
        '500':
          description: DB, dependency or unknown system error.

components:
  parameters:
    Authorization:
      name: Authorization
      in: header
      required: true
      description: authorization token provided from auth server (Firebase)
      schema:
        type: string
        format: JWT
        example: "J.W.T"
    UserUuid:
      name: uuid
      in: path
      required: true
      description: user's uuid updated.
      schema:
        type: string
        format: uuid
        example: "789e4567-e89b-12d3-a456-426614174000"
    GroupIdPath:
      name: uuid
      in: path
      required: true
      description: Group's uuid.
      schema:
        type: string
        format: uuid
        example: "789e4567-e89b-12d3-a456-426614174000"

  schemas:
    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's name created
        email:
          type: string
          format: email
          description: User's email created

    CreateUserResponse:
      $ref: '#/components/schemas/UserResponse'

    UpdateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: User's name updated
        email:
          type: string
          format: email
          description: User's email updated

    UpdateUserResponse:
      $ref: '#/components/schemas/UserResponse'

    CreateGroupRequest:
      type: object
      required:
        - user_uuid
        - group_name
        - users_name
      properties:
        user_uuid:
          type: string
          format: uuid
          description: user's uuid who creates this group. muse be already signed in.
        group_name:
          type: string
          description: group name to be created.
        users_name:
          type: array
          items:
            type: string
          description: users name to be added into the group

    GetGroupResponse:
      $ref: '#/components/schemas/CreateGroupResponse'

    CreateGroupResponse:
      type: object
      required:
        - group_info
        - users_info
      properties:
        group_info:
          $ref: '#/components/schemas/GroupResponse'
        users_info:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'

    UserResponse:
      type: object
      required:
        - uuid
        - name
        - email
        - auth_user_id
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          description: User's UUID. Human readable.
        name:
          type: string
          description: User's name created
        email:
          type: string
          format: email
          description: User's email created
        auth_user_id:
          type: string
          description: authorized user id. Retrieved from jwt generated by auth server(Firebase)
        created_at:
          type: string
          format: date-time
          description: Creation date.
        updated_at:
          type: string
          format: date-time
          description: Update date.

    GroupResponse:
      type: object
      required:
        - uuid
        - name
        - join_token
        - token_expires
        - created_at
        - updated_at
      properties:
        uuid:
          type: string
          format: uuid
          description: uuid of the group.
        name:
          type: string
          description: name of the group.
        join_token:
          type: string
          format: uuid
          description: token to be used when user join to this group.
        token_expires:
          type: string
          format: date-time
          description: date token will be expired.
        created_at:
          type: string
          format: date-time
          description: date when group was created.
        updated_at:
          type: string
          format: date-time
          description: date when group info was updated.

  examples:
    CreateGroupResponseExample:
      value:
        group_info:
          uuid: "123e4567-e89b-12d3-a456-426614174000"
          name: "Fruits"
          joinToken: "76e4a9e0-df3b-11ec-9d64-0242ac120002"
          tokenExpires: "2023-12-31T23:59:59+09:00"
          createdAt: "2023-01-01T00:00:00+09:00"
          updatedAt: "2023-01-02T00:00:00+09:00"
        users_info:
          - uuid: "789e4567-e89b-12d3-a456-426614174000"
            name: "apple"
            email: "apple@example.com"
            auth_user_id: "authUserId"
            createdAt: "2023-01-01T00:00:00+09:00"
            updatedAt: "2023-01-02T00:00:00+09:00"
          - uuid: "456e4567-e89b-12d3-a456-426614174000"
            name: "banana"
            email: ""
            auth_user_id: "authUserId"
            createdAt: "2023-01-01T00:00:00+09:00"
            updatedAt: "2023-01-02T00:00:00+09:00"
          - uuid: "123e4567-e89b-12d3-a456-426614174001"
            name: "grape"
            email: ""
            auth_user_id: "authUserId"
            createdAt: "2023-01-01T00:00:00+09:00"
            updatedAt: "2023-01-02T00:00:00+09:00"

    CreateGroupRequestBodyExample:
      value:
        user_uuid: "789e4567-e89b-12d3-a456-426614174000"
        group_name: "Fruits"
        users_name:
          - "apple"
          - "banana"
          - "grape"

    CreateUserRequestExample:
      value:
        user_name: "山田 花子"
        email: "hanako-yamada@gmail.com"

    UpdateUserRequestExample:
      value:
        user_name: "山田 花子"
        email: "hanako-yamada@gmail.com"

    CreateUpdateUserResponseExample:
      value:
        uuid: "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p"
        name: "山田 花子"
        email: "hanako-yamada@gmail.com"
        auth_user_id: "authUserId"
        created_at: "2023-04-01T12:00:00+09:00"
        updated_at: "2023-04-01T12:00:00+09:00"